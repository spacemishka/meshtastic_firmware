name: Firmware Build

concurrency:
  group: firmware-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
      - develop
      - event/*
    paths-ignore:
      - "**.md"
      - version.properties
  pull_request_target:
    branches:
      - master
      - develop
      - event/*
    paths-ignore:
      - "**.md"
  workflow_dispatch:

env:
  PLATFORMIO_CACHE_DIR: ~/.platformio
  BUILD_RETENTION_DAYS: 30

jobs:
  setup:
    strategy:
      fail-fast: false
      matrix:
        arch: [esp32, esp32s3, esp32c3, esp32c6, nrf52840, rp2040, stm32, check]
    runs-on: ubuntu-latest
    outputs:
      esp32: ${{ steps.jsonStep.outputs.esp32 }}
      esp32s3: ${{ steps.jsonStep.outputs.esp32s3 }}
      esp32c3: ${{ steps.jsonStep.outputs.esp32c3 }}
      esp32c6: ${{ steps.jsonStep.outputs.esp32c6 }}
      nrf52840: ${{ steps.jsonStep.outputs.nrf52840 }}
      rp2040: ${{ steps.jsonStep.outputs.rp2040 }}
      stm32: ${{ steps.jsonStep.outputs.stm32 }}
      check: ${{ steps.jsonStep.outputs.check }}
      version_long: ${{ steps.version.outputs.long }}
      version_deb: ${{ steps.version.outputs.deb }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Cache PlatformIO Core
        uses: actions/cache@v4
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-pio-core-${{ hashFiles('**/platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-pio-core-

      - name: Generate build matrix
        id: jsonStep
        run: |
          if [[ "$GITHUB_HEAD_REF" == "" ]]; then
            TARGETS=$(./bin/generate_ci_matrix.py ${{matrix.arch}})
          else  
            TARGETS=$(./bin/generate_ci_matrix.py ${{matrix.arch}} quick)
          fi
          echo "Name: $GITHUB_REF_NAME Base: $GITHUB_BASE_REF Ref: $GITHUB_REF"
          echo "Targets for ${{matrix.arch}}: $TARGETS"
          echo "${{matrix.arch}}=$(jq -cn --argjson environments "$TARGETS" '{board: $environments}')" >> $GITHUB_OUTPUT

      - name: Get version info
        id: version
        run: |
          echo "long=$(./bin/buildinfo.py long)" >> $GITHUB_OUTPUT
          echo "deb=$(./bin/buildinfo.py deb)" >> $GITHUB_OUTPUT

  check:
    needs: setup
    if: ${{ github.event_name != 'workflow_dispatch' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.check) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check ${{ matrix.board }}
        run: bin/check-all.sh ${{ matrix.board }}

  # Platform-specific build jobs
  build-esp32:
    needs: setup
    if: ${{ fromJson(needs.setup.outputs.esp32).board[0] != null }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.esp32) }}
    uses: ./.github/workflows/build_esp32.yml
    with:
      board: ${{ matrix.board }}

  build-esp32-s3:
    needs: setup
    if: ${{ fromJson(needs.setup.outputs.esp32s3).board[0] != null }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.esp32s3) }}
    uses: ./.github/workflows/build_esp32.yml
    with:
      board: ${{ matrix.board }}

  build-esp32-c3:
    needs: setup
    if: ${{ fromJson(needs.setup.outputs.esp32c3).board[0] != null }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.esp32c3) }}
    uses: ./.github/workflows/build_esp32.yml
    with:
      board: ${{ matrix.board }}

  build-esp32-c6:
    needs: setup
    if: ${{ fromJson(needs.setup.outputs.esp32c6).board[0] != null }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.esp32c6) }}
    uses: ./.github/workflows/build_esp32.yml
    with:
      board: ${{ matrix.board }}

  build-nrf52:
    needs: setup
    if: ${{ fromJson(needs.setup.outputs.nrf52840).board[0] != null }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.nrf52840) }}
    uses: ./.github/workflows/build_nrf52.yml
    with:
      board: ${{ matrix.board }}

  build-rpi2040:
    needs: setup
    if: ${{ fromJson(needs.setup.outputs.rp2040).board[0] != null }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.rp2040) }}
    uses: ./.github/workflows/build_rpi2040.yml
    with:
      board: ${{ matrix.board }}

  build-stm32:
    needs: setup
    if: ${{ fromJson(needs.setup.outputs.stm32).board[0] != null }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.stm32) }}
    uses: ./.github/workflows/build_stm32.yml
    with:
      board: ${{ matrix.board }}

  gather-artifacts:
    needs: [setup, build-esp32, build-esp32-s3, build-esp32-c3, build-esp32-c6, build-nrf52, build-rpi2040, build-stm32]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [esp32, esp32s3, esp32c3, esp32c6, nrf52840, rp2040, stm32]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: firmware-${{ matrix.arch }}-*-${{ needs.setup.outputs.version_long }}
          merge-multiple: true
          path: ./artifacts

      - name: Download build reports
        uses: actions/download-artifact@v4
        with:
          pattern: build-report-${{ matrix.arch }}-*-${{ needs.setup.outputs.version_long }}
          merge-multiple: true
          path: ./build-reports

      - name: Prepare release package
        run: |
          mkdir -p release/{firmware,debug}
          # Move device scripts
          cp -r ./bin/device-*.sh ./bin/device-*.bat release/firmware/
          chmod +x release/firmware/device-*.sh
          
          # Move firmware files
          find ./artifacts -type f \( -name "*.bin" -o -name "*.hex" -o -name "*.uf2" -o -name "*-ota.zip" -o -name "bleota*.bin" \) -exec cp {} release/firmware/ \;
          
          # Move debug files
          find ./artifacts -type f -name "*.elf" -exec cp {} release/debug/ \;
          cp -r build-reports/* release/debug/

      - name: Create firmware package
        run: |
          cd release
          zip -r ../firmware-${{ matrix.arch }}-${{ needs.setup.outputs.version_long }}.zip firmware/
          zip -r ../debug-${{ matrix.arch }}-${{ needs.setup.outputs.version_long }}.zip debug/

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.arch }}-${{ needs.setup.outputs.version_long }}
          path: |
            ./firmware-${{ matrix.arch }}-${{ needs.setup.outputs.version_long }}.zip
            ./debug-${{ matrix.arch }}-${{ needs.setup.outputs.version_long }}.zip
          retention-days: ${{ env.BUILD_RETENTION_DAYS }}

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const name = '${{ matrix.arch }}';
            const version = '${{ needs.setup.outputs.version_long }}';
            const body = `## ðŸ“¦ Build artifacts for ${name}\n\n` +
                        `- [Download Firmware](../artifacts/firmware-${name}-${version}.zip)\n` +
                        `- [Download Debug Symbols](../artifacts/debug-${name}-${version}.zip)\n\n` +
                        `These artifacts will be available for ${process.env.BUILD_RETENTION_DAYS} days.\n` +
                        `Memory usage reports are included in the debug package.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  create-release:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master'
    needs: [setup, gather-artifacts]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          pattern: release-*-${{ needs.setup.outputs.version_long }}
          merge-multiple: true

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.setup.outputs.version_long }} \
            --title "Meshtastic Firmware ${{ needs.setup.outputs.version_long }}" \
            --draft \
            --prerelease \
            ./artifacts/*.zip \
            --notes "## Release Notes
            
            This release includes firmware builds for all supported hardware platforms.
            
            ### Included Architectures
            - ESP32 (ESP32, ESP32-S3, ESP32-C3, ESP32-C6)
            - NRF52840
            - RP2040
            - STM32
            
            ### Installation
            See [installation instructions](https://meshtastic.org/docs/installation) for your device.
            
            ### Build Reports
            Debug packages include memory usage analysis and build reports for each board variant."

      - name: Publish to meshtastic.github.io
        uses: peaceiris/actions-gh-pages@v4
        env:
          DEST_PREFIX: ${{ contains(github.ref_name, 'event/') && format('{0}/', github.ref_name) || '' }}
        with:
          deploy_key: ${{ secrets.DIST_PAGES_DEPLOY_KEY }}
          external_repository: meshtastic/meshtastic.github.io
          publish_branch: master
          publish_dir: ./artifacts
          destination_dir: ${{ env.DEST_PREFIX }}firmware-${{ needs.setup.outputs.version_long }}
          keep_files: true
          user_name: github-actions[bot]
          user_email: github-actions[bot]@users.noreply.github.com
          commit_message: "Release ${{ needs.setup.outputs.version_long }}"
          enable_jekyll: true
