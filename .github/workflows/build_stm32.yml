name: Build STM32

on:
  workflow_call:
    inputs:
      board:
        required: true
        type: string

env:
  PLATFORMIO_CACHE_DIR: ~/.platformio
  BUILD_RETENTION_DAYS: 30

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache PlatformIO dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio
            .pio
            ~/.cache/pip
          key: ${{ runner.os }}-pio-stm32-${{ inputs.board }}-${{ hashFiles('**/platformio.ini', '**/boards/*.json') }}
          restore-keys: |
            ${{ runner.os }}-pio-stm32-${{ inputs.board }}-
            ${{ runner.os }}-pio-stm32-
            ${{ runner.os }}-pio-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U platformio

      - name: Check STM32 platform version
        run: platformio platform show ststm32

      - name: Build firmware
        run: |
          platformio run -e ${{ inputs.board }}
          mkdir -p artifacts
          # Copy firmware binaries
          cp .pio/build/${{ inputs.board }}/*.bin artifacts/ || true
          cp .pio/build/${{ inputs.board }}/*.elf artifacts/ || true
          # Copy bootloader if exists
          cp .pio/build/${{ inputs.board }}/bootloader*.bin artifacts/ || true
          # Copy littlefs image if exists
          cp .pio/build/${{ inputs.board }}/littlefs*.bin artifacts/ || true

      - name: Analyze firmware size
        run: |
          echo "Firmware size analysis for ${{ inputs.board }}"
          platformio run --target size -e ${{ inputs.board }}
          echo "Memory usage details:"
          python -c "
          import os
          import glob
          import subprocess
          
          def format_size(size, total=None):
              if total:
                  return f'{size:,} bytes ({size/total*100:.1f}%)'
              return f'{size:,} bytes'
          
          def analyze_elf(elf_file):
              # Use arm-none-eabi-size for detailed section analysis
              result = subprocess.run(['arm-none-eabi-size', '-A', elf_file], 
                                   capture_output=True, text=True)
              if result.returncode == 0:
                  print('Section sizes:')
                  print(result.stdout)
          
          elf_files = glob.glob('.pio/build/${{ inputs.board }}/*.elf')
          if elf_files:
              elf_file = elf_files[0]
              elf_size = os.path.getsize(elf_file)
              print(f'ELF size: {format_size(elf_size)}')
              analyze_elf(elf_file)
          
          bin_files = glob.glob('.pio/build/${{ inputs.board }}/*.bin')
          for f in bin_files:
              size = os.path.getsize(f)
              print(f'{os.path.basename(f)}: {format_size(size)}')
          "

      - name: Get version info
        id: version
        run: echo "long=$(./bin/buildinfo.py long)" >> $GITHUB_OUTPUT

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-stm32-${{ inputs.board }}-${{ steps.version.outputs.long }}
          path: artifacts/
          retention-days: ${{ env.BUILD_RETENTION_DAYS }}
          if-no-files-found: error

      - name: Upload build report
        uses: actions/upload-artifact@v4
        with:
          name: build-report-stm32-${{ inputs.board }}-${{ steps.version.outputs.long }}
          path: |
            .pio/build/${{ inputs.board }}/*.map
            .pio/build/${{ inputs.board }}/compile_commands.json
            .pio/build/${{ inputs.board }}/*.lst
          retention-days: ${{ env.BUILD_RETENTION_DAYS }}
          if-no-files-found: warn

      - name: Memory usage warning check
        run: |
          python -c "
          import glob
          import subprocess
          import sys
          
          def check_memory_usage(elf_file):
              result = subprocess.run(['arm-none-eabi-size', elf_file], 
                                   capture_output=True, text=True)
              if result.returncode == 0:
                  # Parse output (text, data, bss)
                  sizes = [int(x) for x in result.stdout.split('\n')[1].split()[:3]]
                  flash_usage = sizes[0] + sizes[1]
                  ram_usage = sizes[1] + sizes[2]
                  
                  # Example thresholds (adjust as needed)
                  FLASH_THRESHOLD = 0.9  # 90%
                  RAM_THRESHOLD = 0.85   # 85%
                  
                  warnings = []
                  if flash_usage > FLASH_THRESHOLD:
                      warnings.append(f'Flash usage is high: {flash_usage/FLASH_THRESHOLD*100:.1f}%')
                  if ram_usage > RAM_THRESHOLD:
                      warnings.append(f'RAM usage is high: {ram_usage/RAM_THRESHOLD*100:.1f}%')
                  
                  if warnings:
                      print('⚠️ Memory usage warnings:')
                      for w in warnings:
                          print(f'  - {w}')
                      sys.exit(1)
          
          elf_files = glob.glob('.pio/build/${{ inputs.board }}/*.elf')
          if elf_files:
              check_memory_usage(elf_files[0])
          "
        continue-on-error: true
